// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client" // Simplified output path
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid()) @db.Char(36)
  email     String      @unique @db.VarChar(255)
  name      String?     @db.VarChar(100)
  role      UserRole    @default(CLIENT)
  createdAt DateTime    @default(now()) @map("created_at")
  lastLogin DateTime?   @map("last_login")
  isActive  Boolean     @default(true) @map("is_active")
  assessments Assessment[]
  developmentPlans DevelopmentPlan[]
  quarterlyReviews QuarterlyReview[] // Relation to Quarterly Reviews

  @@index([email])
  @@map("users")
}

model Assessment {
  id                String      @id @default(uuid()) @db.Char(36)
  userId           String      @map("user_id") @db.Char(36)
  type             AssessmentType
  rawResults       Json        @map("raw_results")
  processedInsights Json       @map("processed_insights")
  createdAt        DateTime    @default(now()) @map("created_at")
  user             User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("assessments")
}

enum UserRole {
  CLIENT
  COACH
  ADMIN
}

enum AssessmentType {
  BIG_FIVE
  SIXTEEN_PF
  HOLLAND_CODE
  DISC
  TALENTSMART_EQ
  CAREER_VALUES
}

model DevelopmentPlan {
  id        String   @id @default(uuid()) @db.Char(36)
  userId    String   @map("user_id") @db.Char(36)
  title     String?  @db.VarChar(255) // Optional title for the plan
  content   String   @db.Text // Store the Markdown content
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("development_plans")
}

model QuarterlyReview {
  id        String   @id @default(uuid()) @db.Char(36)
  userId    String   @map("user_id") @db.Char(36)
  reviewDate DateTime @default(now()) @map("review_date") // Date the review pertains to or was conducted
  content   String   @db.Text // Content of the review
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, reviewDate]) // Index for fetching latest review for a user
  @@map("quarterly_reviews")
}
